// <auto-generated />
using System;
using EduShield.Core.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace EduShield.Core.Migrations
{
    [DbContext(typeof(EduShieldDbContext))]
    [Migration("20250815172142_AddFeeManagementEnhancements")]
    partial class AddFeeManagementEnhancements
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("EduShield.Core.Entities.Faculty", b =>
                {
                    b.Property<Guid>("FacultyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Department")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<int>("Gender")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("FacultyId");

                    b.ToTable("Faculty", (string)null);
                });

            modelBuilder.Entity("EduShield.Core.Entities.Fee", b =>
                {
                    b.Property<Guid>("FeeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<decimal>("Amount")
                        .HasPrecision(10, 2)
                        .HasColumnType("numeric(10,2)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<DateTime>("DueDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("FeeType")
                        .HasColumnType("integer");

                    b.Property<bool>("IsPaid")
                        .HasColumnType("boolean");

                    b.Property<decimal>("PaidAmount")
                        .HasPrecision(10, 2)
                        .HasColumnType("numeric(10,2)");

                    b.Property<DateTime?>("PaidDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<Guid>("StudentId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("FeeId");

                    b.HasIndex("DueDate")
                        .HasDatabaseName("IX_Fee_DueDate");

                    b.HasIndex("FeeType")
                        .HasDatabaseName("IX_Fee_Type");

                    b.HasIndex("StudentId", "IsPaid")
                        .HasDatabaseName("IX_Fee_Student_Paid");

                    b.ToTable("Fees", (string)null);
                });

            modelBuilder.Entity("EduShield.Core.Entities.Payment", b =>
                {
                    b.Property<Guid>("PaymentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<decimal>("Amount")
                        .HasPrecision(10, 2)
                        .HasColumnType("numeric(10,2)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("FeeId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("PaymentDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("PaymentMethod")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("TransactionReference")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("PaymentId");

                    b.HasIndex("FeeId")
                        .HasDatabaseName("IX_Payment_Fee");

                    b.HasIndex("PaymentDate")
                        .HasDatabaseName("IX_Payment_Date");

                    b.ToTable("Payments", (string)null);
                });

            modelBuilder.Entity("EduShield.Core.Entities.Performance", b =>
                {
                    b.Property<Guid>("PerformanceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("ExamDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("FacultyId")
                        .HasColumnType("uuid");

                    b.Property<decimal>("Marks")
                        .HasPrecision(5, 2)
                        .HasColumnType("numeric(5,2)");

                    b.Property<decimal>("MaxMarks")
                        .HasPrecision(5, 2)
                        .HasColumnType("numeric(5,2)");

                    b.Property<Guid>("StudentId")
                        .HasColumnType("uuid");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("PerformanceId");

                    b.HasIndex("FacultyId");

                    b.HasIndex("StudentId", "Subject", "ExamDate")
                        .HasDatabaseName("IX_Performance_Student_Subject_Date");

                    b.ToTable("Performances", (string)null);
                });

            modelBuilder.Entity("EduShield.Core.Entities.Student", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<DateTime>("EnrollmentDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("FacultyId")
                        .HasColumnType("uuid");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int>("Gender")
                        .HasColumnType("integer");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("FacultyId");

                    b.HasIndex("PhoneNumber");

                    b.ToTable("Students", (string)null);
                });

            modelBuilder.Entity("EduShield.Core.Entities.Fee", b =>
                {
                    b.HasOne("EduShield.Core.Entities.Student", "Student")
                        .WithMany("Fees")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Student");
                });

            modelBuilder.Entity("EduShield.Core.Entities.Payment", b =>
                {
                    b.HasOne("EduShield.Core.Entities.Fee", "Fee")
                        .WithMany("Payments")
                        .HasForeignKey("FeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Fee");
                });

            modelBuilder.Entity("EduShield.Core.Entities.Performance", b =>
                {
                    b.HasOne("EduShield.Core.Entities.Faculty", "Faculty")
                        .WithMany("Performances")
                        .HasForeignKey("FacultyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("EduShield.Core.Entities.Student", "Student")
                        .WithMany("Performances")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Faculty");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("EduShield.Core.Entities.Student", b =>
                {
                    b.HasOne("EduShield.Core.Entities.Faculty", "Faculty")
                        .WithMany("Students")
                        .HasForeignKey("FacultyId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Faculty");
                });

            modelBuilder.Entity("EduShield.Core.Entities.Faculty", b =>
                {
                    b.Navigation("Performances");

                    b.Navigation("Students");
                });

            modelBuilder.Entity("EduShield.Core.Entities.Fee", b =>
                {
                    b.Navigation("Payments");
                });

            modelBuilder.Entity("EduShield.Core.Entities.Student", b =>
                {
                    b.Navigation("Fees");

                    b.Navigation("Performances");
                });
#pragma warning restore 612, 618
        }
    }
}
